// Generated by view binder compiler. Do not edit!
package com.simplemobiletools.notes.pro.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.simplemobiletools.commons.views.MyAppCompatCheckbox;
import com.simplemobiletools.commons.views.MyRecyclerView;
import com.simplemobiletools.commons.views.MySeekBar;
import com.simplemobiletools.commons.views.MyTextView;
import com.simplemobiletools.notes.pro.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class WidgetConfigBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final MyRecyclerView checklistNoteView;

  @NonNull
  public final ImageView configBgColor;

  @NonNull
  public final MySeekBar configBgSeekbar;

  @NonNull
  public final RelativeLayout configBgSeekbarHolder;

  @NonNull
  public final CoordinatorLayout configCoordinator;

  @NonNull
  public final RelativeLayout configRelative;

  @NonNull
  public final Button configSave;

  @NonNull
  public final ImageView configTextColor;

  @NonNull
  public final RelativeLayout notesPickerHolder;

  @NonNull
  public final MyTextView notesPickerLabel;

  @NonNull
  public final MyTextView notesPickerValue;

  @NonNull
  public final MyAppCompatCheckbox showNoteTitle;

  @NonNull
  public final RelativeLayout showNoteTitleHolder;

  @NonNull
  public final TextView textNoteView;

  @NonNull
  public final MyTextView textNoteViewTitle;

  private WidgetConfigBinding(@NonNull CoordinatorLayout rootView,
      @NonNull MyRecyclerView checklistNoteView, @NonNull ImageView configBgColor,
      @NonNull MySeekBar configBgSeekbar, @NonNull RelativeLayout configBgSeekbarHolder,
      @NonNull CoordinatorLayout configCoordinator, @NonNull RelativeLayout configRelative,
      @NonNull Button configSave, @NonNull ImageView configTextColor,
      @NonNull RelativeLayout notesPickerHolder, @NonNull MyTextView notesPickerLabel,
      @NonNull MyTextView notesPickerValue, @NonNull MyAppCompatCheckbox showNoteTitle,
      @NonNull RelativeLayout showNoteTitleHolder, @NonNull TextView textNoteView,
      @NonNull MyTextView textNoteViewTitle) {
    this.rootView = rootView;
    this.checklistNoteView = checklistNoteView;
    this.configBgColor = configBgColor;
    this.configBgSeekbar = configBgSeekbar;
    this.configBgSeekbarHolder = configBgSeekbarHolder;
    this.configCoordinator = configCoordinator;
    this.configRelative = configRelative;
    this.configSave = configSave;
    this.configTextColor = configTextColor;
    this.notesPickerHolder = notesPickerHolder;
    this.notesPickerLabel = notesPickerLabel;
    this.notesPickerValue = notesPickerValue;
    this.showNoteTitle = showNoteTitle;
    this.showNoteTitleHolder = showNoteTitleHolder;
    this.textNoteView = textNoteView;
    this.textNoteViewTitle = textNoteViewTitle;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static WidgetConfigBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static WidgetConfigBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.widget_config, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static WidgetConfigBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.checklist_note_view;
      MyRecyclerView checklistNoteView = ViewBindings.findChildViewById(rootView, id);
      if (checklistNoteView == null) {
        break missingId;
      }

      id = R.id.config_bg_color;
      ImageView configBgColor = ViewBindings.findChildViewById(rootView, id);
      if (configBgColor == null) {
        break missingId;
      }

      id = R.id.config_bg_seekbar;
      MySeekBar configBgSeekbar = ViewBindings.findChildViewById(rootView, id);
      if (configBgSeekbar == null) {
        break missingId;
      }

      id = R.id.config_bg_seekbar_holder;
      RelativeLayout configBgSeekbarHolder = ViewBindings.findChildViewById(rootView, id);
      if (configBgSeekbarHolder == null) {
        break missingId;
      }

      CoordinatorLayout configCoordinator = (CoordinatorLayout) rootView;

      id = R.id.config_relative;
      RelativeLayout configRelative = ViewBindings.findChildViewById(rootView, id);
      if (configRelative == null) {
        break missingId;
      }

      id = R.id.config_save;
      Button configSave = ViewBindings.findChildViewById(rootView, id);
      if (configSave == null) {
        break missingId;
      }

      id = R.id.config_text_color;
      ImageView configTextColor = ViewBindings.findChildViewById(rootView, id);
      if (configTextColor == null) {
        break missingId;
      }

      id = R.id.notes_picker_holder;
      RelativeLayout notesPickerHolder = ViewBindings.findChildViewById(rootView, id);
      if (notesPickerHolder == null) {
        break missingId;
      }

      id = R.id.notes_picker_label;
      MyTextView notesPickerLabel = ViewBindings.findChildViewById(rootView, id);
      if (notesPickerLabel == null) {
        break missingId;
      }

      id = R.id.notes_picker_value;
      MyTextView notesPickerValue = ViewBindings.findChildViewById(rootView, id);
      if (notesPickerValue == null) {
        break missingId;
      }

      id = R.id.show_note_title;
      MyAppCompatCheckbox showNoteTitle = ViewBindings.findChildViewById(rootView, id);
      if (showNoteTitle == null) {
        break missingId;
      }

      id = R.id.show_note_title_holder;
      RelativeLayout showNoteTitleHolder = ViewBindings.findChildViewById(rootView, id);
      if (showNoteTitleHolder == null) {
        break missingId;
      }

      id = R.id.text_note_view;
      TextView textNoteView = ViewBindings.findChildViewById(rootView, id);
      if (textNoteView == null) {
        break missingId;
      }

      id = R.id.text_note_view_title;
      MyTextView textNoteViewTitle = ViewBindings.findChildViewById(rootView, id);
      if (textNoteViewTitle == null) {
        break missingId;
      }

      return new WidgetConfigBinding((CoordinatorLayout) rootView, checklistNoteView, configBgColor,
          configBgSeekbar, configBgSeekbarHolder, configCoordinator, configRelative, configSave,
          configTextColor, notesPickerHolder, notesPickerLabel, notesPickerValue, showNoteTitle,
          showNoteTitleHolder, textNoteView, textNoteViewTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
