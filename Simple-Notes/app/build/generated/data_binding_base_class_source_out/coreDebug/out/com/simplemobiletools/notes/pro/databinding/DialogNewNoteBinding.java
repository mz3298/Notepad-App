// Generated by view binder compiler. Do not edit!
package com.simplemobiletools.notes.pro.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RadioGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.textfield.TextInputEditText;
import com.simplemobiletools.commons.views.MyCompatRadioButton;
import com.simplemobiletools.commons.views.MyTextInputLayout;
import com.simplemobiletools.commons.views.MyTextView;
import com.simplemobiletools.notes.pro.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogNewNoteBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout dialogHolder;

  @NonNull
  public final TextInputEditText lockedNoteTitle;

  @NonNull
  public final RadioGroup newNoteType;

  @NonNull
  public final MyTextView newNoteTypeLabel;

  @NonNull
  public final MyTextInputLayout noteTitleHint;

  @NonNull
  public final MyCompatRadioButton typeChecklist;

  @NonNull
  public final MyCompatRadioButton typeTextNote;

  private DialogNewNoteBinding(@NonNull LinearLayout rootView, @NonNull LinearLayout dialogHolder,
      @NonNull TextInputEditText lockedNoteTitle, @NonNull RadioGroup newNoteType,
      @NonNull MyTextView newNoteTypeLabel, @NonNull MyTextInputLayout noteTitleHint,
      @NonNull MyCompatRadioButton typeChecklist, @NonNull MyCompatRadioButton typeTextNote) {
    this.rootView = rootView;
    this.dialogHolder = dialogHolder;
    this.lockedNoteTitle = lockedNoteTitle;
    this.newNoteType = newNoteType;
    this.newNoteTypeLabel = newNoteTypeLabel;
    this.noteTitleHint = noteTitleHint;
    this.typeChecklist = typeChecklist;
    this.typeTextNote = typeTextNote;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogNewNoteBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogNewNoteBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_new_note, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogNewNoteBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      LinearLayout dialogHolder = (LinearLayout) rootView;

      id = R.id.locked_note_title;
      TextInputEditText lockedNoteTitle = ViewBindings.findChildViewById(rootView, id);
      if (lockedNoteTitle == null) {
        break missingId;
      }

      id = R.id.new_note_type;
      RadioGroup newNoteType = ViewBindings.findChildViewById(rootView, id);
      if (newNoteType == null) {
        break missingId;
      }

      id = R.id.new_note_type_label;
      MyTextView newNoteTypeLabel = ViewBindings.findChildViewById(rootView, id);
      if (newNoteTypeLabel == null) {
        break missingId;
      }

      id = R.id.note_title_hint;
      MyTextInputLayout noteTitleHint = ViewBindings.findChildViewById(rootView, id);
      if (noteTitleHint == null) {
        break missingId;
      }

      id = R.id.type_checklist;
      MyCompatRadioButton typeChecklist = ViewBindings.findChildViewById(rootView, id);
      if (typeChecklist == null) {
        break missingId;
      }

      id = R.id.type_text_note;
      MyCompatRadioButton typeTextNote = ViewBindings.findChildViewById(rootView, id);
      if (typeTextNote == null) {
        break missingId;
      }

      return new DialogNewNoteBinding((LinearLayout) rootView, dialogHolder, lockedNoteTitle,
          newNoteType, newNoteTypeLabel, noteTitleHint, typeChecklist, typeTextNote);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
