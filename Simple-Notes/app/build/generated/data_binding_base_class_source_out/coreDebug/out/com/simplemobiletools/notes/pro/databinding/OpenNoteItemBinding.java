// Generated by view binder compiler. Do not edit!
package com.simplemobiletools.notes.pro.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.simplemobiletools.commons.views.MyTextView;
import com.simplemobiletools.notes.pro.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class OpenNoteItemBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final ImageView iconLock;

  @NonNull
  public final RelativeLayout openNoteItemHolder;

  @NonNull
  public final MyTextView openNoteItemText;

  @NonNull
  public final MyTextView openNoteItemTitle;

  private OpenNoteItemBinding(@NonNull RelativeLayout rootView, @NonNull ImageView iconLock,
      @NonNull RelativeLayout openNoteItemHolder, @NonNull MyTextView openNoteItemText,
      @NonNull MyTextView openNoteItemTitle) {
    this.rootView = rootView;
    this.iconLock = iconLock;
    this.openNoteItemHolder = openNoteItemHolder;
    this.openNoteItemText = openNoteItemText;
    this.openNoteItemTitle = openNoteItemTitle;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static OpenNoteItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static OpenNoteItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.open_note_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static OpenNoteItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.icon_lock;
      ImageView iconLock = ViewBindings.findChildViewById(rootView, id);
      if (iconLock == null) {
        break missingId;
      }

      RelativeLayout openNoteItemHolder = (RelativeLayout) rootView;

      id = R.id.open_note_item_text;
      MyTextView openNoteItemText = ViewBindings.findChildViewById(rootView, id);
      if (openNoteItemText == null) {
        break missingId;
      }

      id = R.id.open_note_item_title;
      MyTextView openNoteItemTitle = ViewBindings.findChildViewById(rootView, id);
      if (openNoteItemTitle == null) {
        break missingId;
      }

      return new OpenNoteItemBinding((RelativeLayout) rootView, iconLock, openNoteItemHolder,
          openNoteItemText, openNoteItemTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
