// Generated by view binder compiler. Do not edit!
package com.simplemobiletools.notes.pro.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.simplemobiletools.commons.views.MyFloatingActionButton;
import com.simplemobiletools.commons.views.MyRecyclerView;
import com.simplemobiletools.commons.views.MyTextView;
import com.simplemobiletools.notes.pro.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentChecklistBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final RelativeLayout checklistContentHolder;

  @NonNull
  public final MyFloatingActionButton checklistFab;

  @NonNull
  public final CoordinatorLayout checklistHolder;

  @NonNull
  public final RelativeLayout checklistItemsHolder;

  @NonNull
  public final MyRecyclerView checklistList;

  @NonNull
  public final MyTextView fragmentPlaceholder;

  @NonNull
  public final MyTextView fragmentPlaceholder2;

  @NonNull
  public final ImageView noteLockedImage;

  @NonNull
  public final MyTextView noteLockedLabel;

  @NonNull
  public final RelativeLayout noteLockedLayout;

  @NonNull
  public final TextView noteLockedShow;

  private FragmentChecklistBinding(@NonNull CoordinatorLayout rootView,
      @NonNull RelativeLayout checklistContentHolder, @NonNull MyFloatingActionButton checklistFab,
      @NonNull CoordinatorLayout checklistHolder, @NonNull RelativeLayout checklistItemsHolder,
      @NonNull MyRecyclerView checklistList, @NonNull MyTextView fragmentPlaceholder,
      @NonNull MyTextView fragmentPlaceholder2, @NonNull ImageView noteLockedImage,
      @NonNull MyTextView noteLockedLabel, @NonNull RelativeLayout noteLockedLayout,
      @NonNull TextView noteLockedShow) {
    this.rootView = rootView;
    this.checklistContentHolder = checklistContentHolder;
    this.checklistFab = checklistFab;
    this.checklistHolder = checklistHolder;
    this.checklistItemsHolder = checklistItemsHolder;
    this.checklistList = checklistList;
    this.fragmentPlaceholder = fragmentPlaceholder;
    this.fragmentPlaceholder2 = fragmentPlaceholder2;
    this.noteLockedImage = noteLockedImage;
    this.noteLockedLabel = noteLockedLabel;
    this.noteLockedLayout = noteLockedLayout;
    this.noteLockedShow = noteLockedShow;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentChecklistBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentChecklistBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_checklist, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentChecklistBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.checklist_content_holder;
      RelativeLayout checklistContentHolder = ViewBindings.findChildViewById(rootView, id);
      if (checklistContentHolder == null) {
        break missingId;
      }

      id = R.id.checklist_fab;
      MyFloatingActionButton checklistFab = ViewBindings.findChildViewById(rootView, id);
      if (checklistFab == null) {
        break missingId;
      }

      CoordinatorLayout checklistHolder = (CoordinatorLayout) rootView;

      id = R.id.checklist_items_holder;
      RelativeLayout checklistItemsHolder = ViewBindings.findChildViewById(rootView, id);
      if (checklistItemsHolder == null) {
        break missingId;
      }

      id = R.id.checklist_list;
      MyRecyclerView checklistList = ViewBindings.findChildViewById(rootView, id);
      if (checklistList == null) {
        break missingId;
      }

      id = R.id.fragment_placeholder;
      MyTextView fragmentPlaceholder = ViewBindings.findChildViewById(rootView, id);
      if (fragmentPlaceholder == null) {
        break missingId;
      }

      id = R.id.fragment_placeholder_2;
      MyTextView fragmentPlaceholder2 = ViewBindings.findChildViewById(rootView, id);
      if (fragmentPlaceholder2 == null) {
        break missingId;
      }

      id = R.id.note_locked_image;
      ImageView noteLockedImage = ViewBindings.findChildViewById(rootView, id);
      if (noteLockedImage == null) {
        break missingId;
      }

      id = R.id.note_locked_label;
      MyTextView noteLockedLabel = ViewBindings.findChildViewById(rootView, id);
      if (noteLockedLabel == null) {
        break missingId;
      }

      id = R.id.note_locked_layout;
      RelativeLayout noteLockedLayout = ViewBindings.findChildViewById(rootView, id);
      if (noteLockedLayout == null) {
        break missingId;
      }

      id = R.id.note_locked_show;
      TextView noteLockedShow = ViewBindings.findChildViewById(rootView, id);
      if (noteLockedShow == null) {
        break missingId;
      }

      return new FragmentChecklistBinding((CoordinatorLayout) rootView, checklistContentHolder,
          checklistFab, checklistHolder, checklistItemsHolder, checklistList, fragmentPlaceholder,
          fragmentPlaceholder2, noteLockedImage, noteLockedLabel, noteLockedLayout, noteLockedShow);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
