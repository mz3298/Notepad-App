// Generated by view binder compiler. Do not edit!
package com.simplemobiletools.notes.pro.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.textfield.TextInputEditText;
import com.simplemobiletools.commons.views.MyTextInputLayout;
import com.simplemobiletools.notes.pro.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogManageAutomaticBackupsBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final TextInputEditText backupNotesFilename;

  @NonNull
  public final MyTextInputLayout backupNotesFilenameHint;

  @NonNull
  public final TextInputEditText backupNotesFolder;

  @NonNull
  public final MyTextInputLayout backupNotesFolderHint;

  @NonNull
  public final LinearLayout backupNotesHolder;

  @NonNull
  public final ScrollView backupNotesScrollview;

  private DialogManageAutomaticBackupsBinding(@NonNull ScrollView rootView,
      @NonNull TextInputEditText backupNotesFilename,
      @NonNull MyTextInputLayout backupNotesFilenameHint,
      @NonNull TextInputEditText backupNotesFolder,
      @NonNull MyTextInputLayout backupNotesFolderHint, @NonNull LinearLayout backupNotesHolder,
      @NonNull ScrollView backupNotesScrollview) {
    this.rootView = rootView;
    this.backupNotesFilename = backupNotesFilename;
    this.backupNotesFilenameHint = backupNotesFilenameHint;
    this.backupNotesFolder = backupNotesFolder;
    this.backupNotesFolderHint = backupNotesFolderHint;
    this.backupNotesHolder = backupNotesHolder;
    this.backupNotesScrollview = backupNotesScrollview;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogManageAutomaticBackupsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogManageAutomaticBackupsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_manage_automatic_backups, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogManageAutomaticBackupsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.backup_notes_filename;
      TextInputEditText backupNotesFilename = ViewBindings.findChildViewById(rootView, id);
      if (backupNotesFilename == null) {
        break missingId;
      }

      id = R.id.backup_notes_filename_hint;
      MyTextInputLayout backupNotesFilenameHint = ViewBindings.findChildViewById(rootView, id);
      if (backupNotesFilenameHint == null) {
        break missingId;
      }

      id = R.id.backup_notes_folder;
      TextInputEditText backupNotesFolder = ViewBindings.findChildViewById(rootView, id);
      if (backupNotesFolder == null) {
        break missingId;
      }

      id = R.id.backup_notes_folder_hint;
      MyTextInputLayout backupNotesFolderHint = ViewBindings.findChildViewById(rootView, id);
      if (backupNotesFolderHint == null) {
        break missingId;
      }

      id = R.id.backup_notes_holder;
      LinearLayout backupNotesHolder = ViewBindings.findChildViewById(rootView, id);
      if (backupNotesHolder == null) {
        break missingId;
      }

      ScrollView backupNotesScrollview = (ScrollView) rootView;

      return new DialogManageAutomaticBackupsBinding((ScrollView) rootView, backupNotesFilename,
          backupNotesFilenameHint, backupNotesFolder, backupNotesFolderHint, backupNotesHolder,
          backupNotesScrollview);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
